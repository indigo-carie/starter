html {
  box-sizing: border-box; }

*, *::after, *::before {
  box-sizing: inherit; }

html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  margin: 0;
  padding: 0; }

article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after, q:before, q:after {
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

/*** MIXIN: Flexbox ************************************************************/
/* Vertical Align Mixin */
/* Clearfix */
.clearfix {
  display: block;
  clear: both; }

/** Media Query Mixins, Breakpoints **/
@font-face {
  font-family: "Segoe UI";
  font-weight: 200;
  src: local("Segoe UI Light"); }

@font-face {
  font-family: "Segoe UI";
  font-weight: 300;
  src: local("Segoe UI Semilight"); }

@font-face {
  font-family: "Segoe UI";
  font-weight: 400;
  src: local("Segoe UI"); }

@font-face {
  font-family: "Segoe UI";
  font-weight: 600;
  src: local("Segoe UI Semibold"); }

@font-face {
  font-family: "Segoe UI";
  font-weight: 700;
  src: local("Segoe UI Bold"); }

@font-face {
  font-family: "Segoe UI";
  font-style: italic;
  font-weight: 400;
  src: local("Segoe UI Italic"); }

@font-face {
  font-family: "Segoe UI";
  font-style: italic;
  font-weight: 700;
  src: local("Segoe UI Bold Italic"); }

/* Globals
*************************************************/
*, *:before, *:after {
  box-sizing: border-box; }

html, body {
  height: 100%;
  font: 17px/1.4 'Segoe UI', 'Segoe', Verdana, Arial, sans-serif; }

.wrapper {
  max-width: 1200px;
  margin-left: auto;
  margin-right: auto; }
  .wrapper::after {
    clear: both;
    content: "";
    display: table; }
  .wrapper section {
    float: left;
    display: block;
    margin-right: 2.35765%;
    width: 65.88078%;
    margin-left: 17.05961%; }
    .wrapper section:last-child {
      margin-right: 0; }


/*# sourceMappingURL=data:application/json;base64, */
